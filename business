package com.App.crudv.Business;

import com.App.crudv.Dto.UserDTO;
import com.App.crudv.Entity.User;
import com.App.crudv.Service.UserServiceImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Component
public class UserBusiness {

    @Autowired
    private UserServiceImpl userService;

    public void add(UserDTO userDTO) {
        User user = convertToEntity(userDTO);
        userService.save(user);
    }

    public List<UserDTO> findAll() {
        List<User> users = userService.findAll();
        return users.stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
    }

    public UserDTO findById(Long id) {
        Optional<User> userOptional = userService.findById(id);
        return userOptional.map(this::convertToDTO).orElse(null);
    }

    public UserDTO save(UserDTO userDTO) {
        User user = convertToEntity(userDTO);
        User savedUser = userService.save(user);
        return convertToDTO(savedUser);
    }

    public UserDTO update(UserDTO userDTO) {
        User user = convertToEntity(userDTO);
        User updatedUser = userService.save(user); // Assuming save method updates if exists
        return convertToDTO(updatedUser);
    }

    public void delete(Long id) {
        userService.deleteById(id);
    }

    private User convertToEntity(UserDTO userDTO) {
        User user = new User();
        user.setId(userDTO.getId());
        user.setUsername(userDTO.getUsername());
        user.setEmail(userDTO.getEmail());
        // Map other fields as needed
        return user;
    }

    private UserDTO convertToDTO(User user) {
        UserDTO userDTO = new UserDTO();
        userDTO.setId(user.getId());
        userDTO.setUsername(user.getUsername());
        userDTO.setEmail(user.getEmail());
        // Map other fields as needed
        return userDTO;
    }
}
